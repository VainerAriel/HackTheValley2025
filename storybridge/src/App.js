import { useState } from 'react';

const ELEVENLABS_API_KEY = process.env.REACT_APP_ELEVENLABS_API_KEY;

function App() {
  const [isPlaying, setIsPlaying] = useState(false); //const [story, setStory] = useState('') (story is the variable that holds the generated text)
  const [error, setError] = useState(null); //const [generating, isGenerating] = useState(false);
  const [text, setText] = useState('Welcome to StoryBridge! Type something to hear it spoken.'); //const [isPlaying, setIsPlaying] = useState(false)
//there should be a variable that temporarily stores the generated text we got from Gemini (from the gemini generating function)
//Then you setStory(that variable)
//setStory updates the value of 'story' every time a new text is generated by Gemini
  const playAudio = async () => { //const readStory = async () 
    try {
      setIsPlaying(true);
      setError(null);

      const voiceId = 'JBFqnCBsd6RMkjVDRZzb'; //the voice of AI

      // Call ElevenLabs API directly
      const response = await fetch(
        `https://api.elevenlabs.io/v1/text-to-speech/${voiceId}?output_format=mp3_44100_128`,
        {
          method: 'POST',
          headers: {
            'xi-api-key': ELEVENLABS_API_KEY,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            text: text, //story instead of text
            model_id: 'eleven_multilingual_v2',
          }),
        }
      );

      if (!response.ok) {
        throw new Error(`API error: ${response.status} ${response.statusText}`);
      }

      // Get audio blob and play it
      const audioBlob = await response.blob();
      const audioUrl = URL.createObjectURL(audioBlob);
      const audio = new Audio(audioUrl);

      audio.onended = () => {
        setIsPlaying(false);
        URL.revokeObjectURL(audioUrl);
      };

      audio.onerror = () => {
        setError('Failed to play audio');
        setIsPlaying(false);
        URL.revokeObjectURL(audioUrl);
      };

      await audio.play();

    } catch (err) {
      console.error('Error:', err);
      setError(err.message);
      setIsPlaying(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="max-w-2xl w-full bg-white rounded-2xl shadow-xl p-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">
            ðŸŒ‰ Welcome to StoryBridge
          </h1>
          <p className="text-lg text-gray-600">
            Transform your text into natural speech with ElevenLabs API
          </p>
        </div>

        <div className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Enter your text:
            </label>
            <textarea
              value={text}
              onChange={(e) => setText(e.target.value)}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent resize-none"
              rows="4"
              placeholder="Type something to convert to speech..."
            />
          </div>

          <button
            onClick={playAudio} //{readStory}
            disabled={isPlaying || !text.trim()}
            className={`w-full py-4 px-6 rounded-lg font-semibold text-white transition-all duration-200 ${
              isPlaying || !text.trim()
                ? 'bg-gray-400 cursor-not-allowed'
                : 'bg-indigo-600 hover:bg-indigo-700 hover:shadow-lg transform hover:scale-105'
            }`}
          >
            {isPlaying ? (
              <span className="flex items-center justify-center">
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Playing...
              </span>
            ) : (
              'ðŸŽµ Play Audio'
            )}
          </button>

          {error && (
            <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
              <p className="text-red-600 text-sm">
                <strong>Error:</strong> {error}
              </p>
            </div>
          )}
        </div>

        <div className="mt-8 pt-6 border-t border-gray-200">
          <p className="text-xs text-gray-500 text-center">
            Powered by ElevenLabs AI â€¢ Built with React & Tailwind CSS
          </p>
        </div>
      </div>
    </div>
  );
}

export default App;